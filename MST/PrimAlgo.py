#!/usr/bin/env python
# coding: utf-8
# Author: Valentyn Kofanov (knu)
# Created: 12/7/18

"""
 Искомый минимальный остов строится постепенно, добавлением в него рёбер по одному. Изначально остов полагается
 состоящим из единственной вершины (её можно выбрать произвольно). Затем выбирается ребро минимального веса,
 исходящее из этой вершины, и добавляется в минимальный остов. После этого остов содержит уже две вершины,
 и теперь ищется и добавляется ребро минимального веса, имеющее один конец в одной из двух выбранных вершин,
 а другой — наоборот, во всех остальных, кроме этих двух. И так далее, т.е. всякий раз ищется минимальное
 по весу ребро, один конец которого — уже взятая в остов вершина, а другой конец — ещё не взятая, и это ребро
 добавляется в остов (если таких рёбер несколько, можно взять любое).
"""


def search_min(tr, vizited):
    index2 = None
    min = max(tr)
    for ind in vizited:
        for index, elem in enumerate(tr[ind]):
            if 0 < elem < min and index not in vizited:
                min = elem  # веса путей
                index2 = index  # индекс вершины
    return [min, index2]


def PrimAlgo(matr):
    """
    Алгоритм Прима
    :param matr: матрица смежности графа
    :return:
    """
    toVisit = [i for i in range(1, len(matr))]  # вершины кроме начальной(0)
    vizited = [0]
    result = [0]  # начнем с первого
    for _ in toVisit:
        weight, ind = search_min(matr, vizited)
        result.append(weight)  # в результат будут заноситься веса
        vizited.append(ind)  # содержит карту пути
    return result
